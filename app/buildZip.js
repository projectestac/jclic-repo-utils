'use strict';

define(
  ['jszip', 'jszip-utils', 'jquery'],
  function (JSZip, JSZipUtils, $) {
    var buildZip = function (baseURL, project, logger, avoidDir) {
      // TODO: implement verbosity level

      var indexTemplate = '\
<!DOCTYPE html>\n\
<html>\n\
  <head>\n\
    <meta charset="UTF-8">\n\
    <title>%%TITLE%%</title>\n\
    <meta name="apple-mobile-web-app-capable" content="yes">\n\
    <meta name="mobile-web-app-capable" content="yes">\n\
    <meta name="application-name" content="%%TITLE%%">\n\
    <link rel="shortcut icon" href="favicon.ico">\n\
    <link rel="icon" sizes="16x16" href="favicon.ico">\n\
    <link rel="icon" sizes="72x72" href="icon-72.png">\n\
    <link rel="icon" sizes="192x192" href="icon-192.png">\n\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n\
    <script type="text/javascript" src="https://clic.xtec.cat/dist/jclic.js/jclic.min.js"></script>\n\
  </head>\n\
  <body style="margin:0">\n\
    <div class ="JClic" data-project="%%MAINFILE%%"></div>\n\
  </body>\n\
</html>';

      var imsmanifestTemplate = '\
<?xml version="1.0" encoding="UTF-8"?>\n\
<!-- Generated by JClic - https://projectestac.github.io/jclic -->\n\
<manifest identifier="JClic-%%ID%%" version="1.0" xmlns="http://www.imsproject.org/xsd/imscp_rootv1p1p2"\n\
 xmlns:adlcp="http://www.adlnet.org/xsd/adlcp_rootv1p2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n\
 xsi:schemaLocation= "http://www.imsproject.org/xsd/imscp_rootv1p1p2 imscp_rootv1p1p2.xsd http://www.imsglobal.org/xsd/imsmd_rootv1p2p1 imsmd_rootv1p2p1.xsd http://www.adlnet.org/xsd/adlcp_rootv1p2 adlcp_rootv1p2.xsd">\n\
 <metadata>\n\
  <schema>ADL SCORM</schema>\n\
  <schemaversion>1.2</schemaversion>\n\
 </metadata>\n\
 <organizations default="JClic">\n\
  <organization identifier="JClic">\n\
   <title>%%TITLE%%</title>\n\
   <item identifier="ITEM_JClic-%%ID%%" identifierref="RES_JClic-%%ID%%">\n\
    <title>%%TITLE%%</title>\n\
   </item>\n\
  </organization>\n\
 </organizations>\n\
 <resources>\n\
  <resource identifier="RES_JClic-%%ID%%" type="webcontent" href="/index.html" adlcp:scormtype="sco">\n\
  %%FILES%%\n\
  </resource>\n\
 </resources>\n\
</manifest>';

      var zip = new JSZip();
      var handlers = [];
      avoidDir = avoidDir || '';
      project.files.forEach(function (file) {
        handlers.push(new Promise(function (resolve, reject) {
          logger.log('Loading ' + file);

          if (avoidDir && file === 'project.json') {
            //TODO: Check XML and JSON encoding!

            var prj = JSON.parse(JSON.stringify(project, null, ' ').replace(avoidDir, ''));

            // Delete unused project fields
            delete prj.zipFile;
            delete prj.instFile;
            delete prj.clicZoneId;
            delete prj.clicZoneURL;
            delete prj.clicZoneAppletURL;

            // Add index.html if needed
            if (!prj.files.includes('index.html')) {
              zip.file('index.html',
                indexTemplate
                  .replace(/%%TITLE%%/g, prj.title.replace('"', '\\"'))
                  .replace(/%%MAINFILE%%/g, prj.mainFile));
              prj.files.push('index.html');
            }

            // Add imsmanifest.xml if needed
            if (!prj.files.includes('imsmanifest.xml')) {
              prj.files.push('imsmanifest.xml');
              zip.file('imsmanifest.xml',
                imsmanifestTemplate
                  .replace(/%%ID%%/g, Math.round(0x10000 + Math.random() * 0x10000).toString(16).toUpperCase().substring(1))
                  .replace(/%%TITLE%%/g, encodeURIComponent(prj.title))
                  .replace(/%%FILES%%/g, prj.files.map(function (v) { return '<file href="' + v + '"/>'; }).join('\n')));
            }

            zip.file(file.replace(avoidDir, ''), JSON.stringify(prj));
            resolve(zip);
          }
          else
            JSZipUtils.getBinaryContent(baseURL + file, function (err, data) {
              if (err)
                reject(err);
              else {
                logger.log(file + ' has been loaded!');
                zip.file(file.replace(avoidDir, ''), data, { binary: true });
                resolve(zip);
              }
            });
        }));
      });
      // Returns a promise
      return $.when.apply($, handlers);
    }

    return buildZip;
  });
